/**
 * @file D4310_Motor.h
 * @author ZS
 * @brief
 * @version 0.1
 * @date 2024-12-20
 *
 * @copyright Copyright (c)
 *
 */
#ifndef __J4310_MOTOR_H
#define __J4310_MOTOR_H

#include "can.h"
#include "main.h"
#include "typedef.h"
#include "Task_CanReceive.h"
#include "PID.h"

#define J4310_READID_PITCH 0x01
#define J4310_SENDID_Pitch 0x001 // ï¿½ï¿½ï¿½ï¿½Pitchï¿½ï¿½ï¿½ï¿½
#define J4310_MaxV 200           // ï¿½ï¿½ï¿½Í¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½,ï¿½ï¿½Î»rpm
#define J4310_MaxT 7             // ï¿½ï¿½ï¿½Í¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å¤ï¿½Ø£ï¿½ï¿½ï¿½Î»NM
#define J4310_ReductionRatio 10  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù±ï¿?

#define J4310_FIRSTANGLE 3800 /* ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼Î»ï¿½ï¿? */

#define J4310_mAngleRatio 22.7527f // ï¿½ï¿½Ðµï¿½Ç¶ï¿½ï¿½ï¿½ï¿½ï¿½Êµï¿½Ç¶ÈµÄ±ï¿½ï¿½ï¿½
#define Pi 3.14159265

#define J4310_getRoundAngle(rAngle) rAngle / J4310_mAngleRatio // ï¿½ï¿½Ðµï¿½Ç¶ï¿½ï¿½ï¿½ï¿½ï¿½Êµï¿½Ç¶ÈµÄ±ï¿½ï¿½ï¿½

#define J4310_FunGroundInit  \
  {                          \
      &J4310_setParameter,   \
      &J4310_Enable,         \
      &J4310_Save_Pos_Zero,  \
      &J4310_getInfo,        \
      &J4310_setTargetAngle, \
      &J4310_Reset,          \
      &Check_J4310,          \
  }

typedef struct
{
  int16_t state;            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½×´Ì?
  float realAngle;          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä»ï¿½Ðµï¿½Ç¶È£ï¿½ï¿½ï¿½Î»ï¿½ï¿½ï¿½È£ï¿?
  float realSpeed;          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù¶È£ï¿½ï¿½ï¿½Î»ï¿½ï¿½rpmï¿½ï¿½
  uint8_t temperatureMOS;   // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½MOSï¿½Â¶ï¿½
  uint8_t temperatureRotor; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½ï¿½ï¿½È¦ï¿½Â¶ï¿?
  float torqueInit;         // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½Å¤ï¿½ï¿?
  float torque;             // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½Å¤ï¿½ï¿½
  float angleInit;          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä»ï¿½Ðµï¿½Ç¶ï¿½
  float speedInit;          // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù¶ï¿½

  uint16_t lastAngle; // ï¿½Ï´ÎµÄ½Ç¶ï¿½

  int32_t targetSpeed; // Ä¿ï¿½ï¿½ï¿½Ù¶ï¿½
  int32_t targetAngle; // Ä¿ï¿½ï¿½Ç¶ï¿?

  float outPosition; // ï¿½ï¿½ï¿½Î»ï¿½ï¿?
  float outSpeed;    // ï¿½ï¿½ï¿½ï¿½Ù¶ï¿?
  float outTorque;   // ï¿½ï¿½ï¿½Å¤ï¿½ï¿?

  int16_t turnCount; // ×ªï¿½ï¿½ï¿½ï¿½È¦ï¿½ï¿½
  float totalAngle;  // ï¿½Û»ï¿½ï¿½Ü¹ï¿½ï¿½Ç¶ï¿½

  int8_t outKp; // Î»ï¿½Ã±ï¿½ï¿½ï¿½Ïµï¿½ï¿½
  int8_t outKd; // Î»ï¿½ï¿½Î¢ï¿½ï¿½Ïµï¿½ï¿½

  uint8_t InfoUpdateFlag;   // ï¿½ï¿½Ï¢ï¿½ï¿½È¡ï¿½ï¿½ï¿½Â±ï¿½Ö¾
  uint16_t InfoUpdateFrame; // Ö¡ï¿½ï¿½
  uint8_t OffLineFlag;      // ï¿½è±¸ï¿½ï¿½ï¿½ß±ï¿½Ö¾
} J4310s_t;

extern J4310s_t J4310s_Pitch;

typedef enum
{
  // ï¿½ï¿½Òª×¢ï¿½ï¿½ï¿½ë±¨ï¿½Ä½ï¿½ï¿½Üºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½
  // J4310_PITCH_Right = 0,
  J4310_PITCH = 0,
} J4310Name_e;

typedef struct
{
  void (*J4310_setParameter)(float uq1, float uq2, float uq3, float uq4, float uq5, uint8_t *data);
  void (*J4310_Enable)(void);
  void (*J4310_Save_Pos_Zero)(void);
  void (*J4310_getInfo)(Can_Export_Data_t RxMessage);
  void (*J4310_setTargetAngle)(J4310s_t *J4310, int32_t angle);
  void (*J4310_Reset)(J4310s_t *J4310);
  void (*Check_J4310)(void);
} J4310_Fun_t;

extern J4310s_t J4310s_Pitch; // IDÎª8
extern J4310_Fun_t J4310_Fun;

#endif /* __J4310_MOTOR_H */
